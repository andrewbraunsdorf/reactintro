Version1.0

React
JS library created by facebook
Also used by netflix and Instagram
Usesd to create JS-driven dynamic web apps
In that regard can be compared to Angular and Vue

Redux
A layer on top of React
Helps with State Management of our app
	Datain in the app
	UI state of the app
Is the menu open or closed

React basics
Componetnts events templates props and forms

React router
Routes, route paramenters, redirects

Redux
Stores, actions and reducers

Version 2.0
React
Components, Components, Components
Compents for Nav bar, Search Bar and Footer

Creates a js representation of the virtual dom
Takes virtual dom renders it to the DOM,

Idea heres is that when one of the component changes it renders it to the DOM very quickly because of the virtual DOM.
React creates a new virtual DOM and compares it to the OLD virtual DOM, and knows exact what it has to update in the actual DOM.

This happens every time, one of your component state changes.

Components and Templates
Components look like HTML templates (actually JSX)- JS XML
They can contain ”state” (data or UI State)
They can contain JS for functionality

Version 3.0
Package can create flow of whole pack with a full pack set up
  <!--Core react libary-->
  <script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
  <!--React DOM libary- glue layer between react and the dom. Its what lets us inject our components into the DOM-->
  
  <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>

Need both of the 2 libaries loaded into our index dot HTML Document

Packages
ES7 React/Redux GraphQL/React-Native Snippets
Sublime Babel

Version4.0
React components are the lifeblood of react and we use them to take control of different elements inside the navbar search bar contact form
Need to create class based components
Classes are a way for us to bluepring objects in JS

React Object Component to inherit all the base functionality of a component into this class
Class based components must have at least one function inside of them And that function is called render
Render is responsible for rendering our template to w.e element we want to render to return a value inside it is going to be the JSX template and is going to go inside paratheseses 
JSX allows us to write HTML code inside JS 

Can only have one root element
Cannot use class have to use className=
Take the glue layer that takes our components and can render them to the DOM is by saying react.  We don’t get access to that by here
When using ReactDOM.render() first parameter is which component we want to render to the DOM
We have to add it as a tag like ReactDOM.render(<App />, docment.getElementById(‘app’)) 
The second paramter is going to be where we want to render it to the DOM

JSX is normally not support in browers
Have to add type="text/babel" to <script type="text/babel"> before the dom
It doesnt get rid of it, it just nests our component inside that div

Idea of React is to actually output dynamic content
We can output dynamic JS content  inside these curly braces
Like take math object Math.random() * 10
Have to always use {}
So in
	<script type="text/babel">
		class App extends React.Component {
			render() {
				return (
					<div className="app-content">
					<h1> Hey, ninjas</h1>
					<p>{Math.random() * 10}</p>
					</div>
				);
			}
		}
		ReactDOM.render(<App />, document.getElementById('app'))
	</script>

Version5.0
Component State
JS Object
Descibes the current state of the component
Data, UI State
The state of a component can be updated over time
	A modal could close
	The data we output could change

Shopping Cart Component
{
	Items: [
		{ name: ‘navy jumper’, price: 9.99 },
{ name: ‘ ninja mask’, price: 19.99 },
]
}
State of compoent is JS object, property name called items, an array and inside array two objects and 2 objects represent an item in shopping cart.  Storing it locally to change state so it adds a third item.  Take state to dynamically add another component.  Storying locally
Pop up and it can either be true or false.  Storing component UI state.  

Different ways to create a state of component
First way is to just define state property within the class
State equals JS object state = {   } which will contain some kind of data or UI state.  Add different properties inside the object
Add name property 
This is not really doing anything
Output state to template
It is going to be dynamically so have to enclose it in { }
This to reference the component itself, then we get access to the state property, then access the name by .name
<p>My name is {this.state.name }</p>
This is how we define state

Version6.0 
React Developer tools for Chrome
Lights up red if dev or lights up blue if its in production
Rendered App to the DOM and can see the state of the component
Real Scenario, the user will dynamically change events based on forms
Lets your interact when you are testing your tools

Version7.0
Re-renders state whenever it is changed re-renders to out put it to the dom
We want to add a button with onClick event but cannot just add <button onClick=””
Because it is in html
Wantto output dynamic JS inside the so we have to add { }
Have to add a function just like we did render()
To call function have to add this.handleClick because it refers to  the component which the function is stored on
Do not want to have this.handleClick() with parenthases because it will run the function as soon as the page is run
We only want to pass a reference instead of automatically firing it.  We want to do it when the user clicks the button
Added handleMouseOver
handleMouseOver(e) {
				console.log(e.target, e.pageX, e.pageY);
			}
.target tells us the target element
.pageX tells us the X coordinate on the page
.pageY tells us the Y coordinate on the page

onCopy={} tells us when the user tries to copy the text
It console logs the result out

Inside a function cannot reference .this due to the different points in the component

Version7.0
Re-renders state whenever it is changed re-renders to out put it to the dom
We want to add a button with onClick event but cannot just add <button onClick=””
Because it is in html
Wantto output dynamic JS inside the so we have to add { }
Have to add a function just like we did render()
To call function have to add this.handleClick because it refers to  the component which the function is stored on
Do not want to have this.handleClick() with parenthases because it will run the function as soon as the page is run
We only want to pass a reference instead of automatically firing it.  We want to do it when the user clicks the button
Added handleMouseOver
handleMouseOver(e) {
				console.log(e.target, e.pageX, e.pageY);
			}
.target tells us the target element
.pageX tells us the X coordinate on the page
.pageY tells us the Y coordinate on the page

onCopy={} tells us when the user tries to copy the text
It console logs the result out

Inside a function cannot reference .this due to the different points in the component
render?

Version8.0
Why can we not access .this in the function when we can call it in render?
Can get it in the templates but not the functions
This is generally determined by how and where the function is called not by where the function sits
The value of the this keyword inside a function is not what you’d expect, so he would probably assume that the context of the this keyword inside the react component instance would be able to access this.state
By default when you call a function like this in reaction to a DOM event in the browser window, the keyword is lost inside the function and its set to undefined, aka undefined and an error

We are able to do it in render as react automatically binds the context of this forest inside this function we dont have to do any manual work
Inside our own custom functions of this class when we call them in reaction to DOM events the context of this is not bound and we have to do it ourselves

If we set the functions to arrow functions it will now work
handleClick = (e) => {
			console.log(this.state);
			}
Arrow functions have a special behavior when it comes to this keyword.  They bind the value of this to w.e this is outside the function
The value of this is just the component instance, so it is taking it and binding it into this in this.state
The arrow function takes the value of this to be the component and passes it inside the function

Change the state when an event happens
We use this.setState() in here we pass what ever properties we want to update

Version9.0
onChange= {} updates every time there is a change

handleChange = (e) => {
				this.setState
			}
Change state when the user types in the form
We have a property called value and that is going to get the value of w.e inside the input field every time something in the input field is set
Change the default
Instead of onClick you do onSubmit it also takes when a user hits enter
Prevent default handleSubmit =(e) => {
				e.preventDefault();
			}

Version10.0
Create React App
A command line tool to create React Aoo
-development server
-use es6 feautures which are not normally supported
-keep our code modular
-use build tools to create optimized code

To get into React in c9 you need to use
npm install -g create-react-app
create-react-app my-app
cd my-app
npm start
Under myapp, public folder is served to the browser 
Index.html is servered in there
Package.lock locks down the file
SRC file is where the folders you use are

Version11.0
Single Page Apps
React apps are typically SPA’s
Only ever one HTML page served to the browser
React then controls what a user sees on that page

There will only ever be one HTML page that is served to the browser from the server and updated based on what the user sees
Multi-page apps- A user will go to an address like website.com/index and send a request to the server
Server sends back html page dependent on address
If go to /contaact it makes another request to server and server sends back response

React, make initial request and it sends back html file, when it reaches browser react takes over 
Then react intercepts that page, and it says what you want to see, and saves you a trip to the server
Public/index.html is the standard file
Need to get the files inside <div id="root"></div>

In src/app.js is an class based component with the render method.  At the end of the file we are exporting it so it can be rendered to the DOM on src/index.js file

Run file
Npm start, you go into the folder myapp and type npm start to go to development server
Index.js is where we render the application to the dom

Deleted css file and test file, logo file
Stripped back file to basics
Updated file and when we save it, it automatically updates

Version 12.0

App.js only component being uploaded on the app.  It is the root component.

There are Nesting Components
App.js is the Root Component sits at the top of the tree, show different components nest in it. When it sits inside aonother component it nests inside of it and it nests Navbar.js and Contact Form.js

At the top of the app.js file we are importing React but also the {component} aspect of it
import React, { Component } from 'react';
When ever we create an app based component we are going to need to add import React, { Component } from 'react';

The render method returns JSX template

We need to export it so we can import it into the main root folder
Export Ninjas, then import it so it can be imported inside the component
Add import Ninjas from './Ninjas'; in the app.js file to import the component
Now we nest it
We nest it as if it was an HTML element 
<Ninjas/> self nested 

Why did we need to nest a component in the first place instead of typing in everything.

Idea of the components is that we are keeping code more modular and that component more modular, and that component may have its own state or method at some point which we dont want to confuse with its own.

How to make it more dynamic you use props.

Version13.0
<Ninjas/>  is the child component because it is sitting inside the parent component
Props are a way to send data from the parent component to the child component

We can pass data instead of hardcoding the data
We use props which is short for properties and we output it into the properties
We can pass name property
Making props and being passed into ninja components.
We can then access them in ninjas via the class based components automatically
Can add js inside render because it is just a js object

In Ninja.js add console.log(this.props) to the render object
In the console we can see the props.  We can output inside the templadte

We can render it in the template using <div> Name: {this.props.name} </div> instead of hardcoding them.

There is an easier way using destructuring
Using properties name
We are storing them in a const
const {name, age, belt} = this.props; and its taking this.props.name and this.props.age and this.props.belt
Now stored as <div> Name: { name } </div>Why did we do it we can paste it below and then output different data
We can use it over and over again just in different places
That is how we pass props down and how we output the props

Version14.0
Nesting Ninja component only outputting one component out to the dom.
Instead out outputting the data on the ninja we will be 
Define data in the state then pass it to the component of Ninjas
Added 
  state = {
    ninjas : [
    { name: 'Ryu', age: 30, belt: 'black', id: 1 },
    { name: 'Yoshi', age: 25, belt: 'green', id: 2 }, 
    { name: 'Crystal', age: 20, belt: 'red', id: 3 }
        ]
  }
Before Render
Each array item is an object
Pass it into component Ninjas
We are going to receive the array as a prop in app.js, cycle through it and out put it for each individual ninja.
Call this prop ninjas, so it now looks like this <Ninjas ninjas={this.state.ninjas}/>

Passing down array of ninjas and passing it down as a prop, inside the component
const { ninjas } = this.props is the same as const ninjas = this.props.ninjas

We want to output it to the dom
Use the js method called map
What does the js method does in js takes the array and it maps it to a new array.  Want to map it to a new array.
Store snippets ina new array then store array
We want to store our new array full of HTML elements inside so we’ll set it equal to ninjas
In .map() we take each individual in this case ninja as we cycle through it
Return a value inside the function
Returned value is the element which is popped into the new array
Return some JSX code, some HTML for each individual ninja, and that will be the template from that individual
One set of JSX for each individual ninja
Instead of referencing name, age, and belt...we need to reference ninja.name, ninja.age, and ninja.belt
Return JSX and storing JSX for each ninja is 
Out put each ninja, create a div and output this array

As it stands each element is getting the same key identifier.
Need to identify the element, to determine which ninja is removed or modified
Each element needs an identifier and we chose the id
render(){
		// console.log(this.props)
		const { ninjas } = this.props;
		const ninjaList = ninjas.map(ninja => {
			return (
			<div className="ninja" key={ninja.id}>
			<div> Name: { ninja.name } </div>
			<div> Age: { ninja.age } </div>
			<div> Belt: { ninja.belt } </div>
			</div>
			);
		});
		return(
			<div className="ninja-list">
				{ ninjaList }
			</div>
		);
	}	

Version 15.0
Container Vs UI Components

Container Components (sometimes called class based components)
Contain state for data and Serve as data sources
Contain lifecycle hooks, grab data and store that in their states and then nest the other components in them, not concerned with how the application looks
Not concerned with UI
Use classes to create
Serve as data sources

UI Components (stateless component)
Don’t contain state
Receive data from props
Only concerned with UI
Use functions to create



Root component at the top, called app.js and it would be called a container component, contains other components
May go to a database via a lifecycle hook, grab some data ,store that on its states, inside app.js and pass that data down as a prop.
Blue would be UI components or functional components, created by functions and not classes.  That is because they dont need their own state.  How do we output the links on a page and  ninjas.js gets its data from props passed down from the app contains a component so this here doesn’t need a state, and its just concerned with how that data is then output to the screen.

Contact form.js container.  You can nest containers inside container
A container will have its own local state to store the users input into that form.  
We would build with a class instead of a function
Containers have states and UI components which dont have states.

This is a container component built with the class keyword
class App extends Component {
  state = {
    ninjas : [
    { name: 'Ryu', age: 30, belt: 'black', id: 1 },
    { name: 'Yoshi', age: 25, belt: 'green', id: 2 }, 
    { name: 'Crystal', age: 20, belt: 'red', id: 3 }
        ]
  }
Ninjas.js does not have its own state.  The data it receives is from the props, in the container component

Delete class in ninjas.js
We are going to build a functional component

Its undefined, cannot read ninjas, off of this.props 

Do not automatically get the props passed to it like we do a class based system

In class based compoenents props automatically come and are attached to the instance of the component anad reference them by saying this.props but in functional components we passed the props in as a parameter to that function and can acess them just by saying props

Made it a functional component because we dont need the state in it anymore
We could no longer access a state in ninjas.js.

We could use destructuring to get ninjas off the props const { ninjas } = props;

Version16.0
Output something conditionally
Show under certain conditions, show only if 5 items or more are added to the shopping basket
Only output ninja if their age is greater than 20
Can use if statement
Mapping through ninjas, we want it to return only ninjas > 20
The other way to display something is by using the ternary operator in JS
Ternary operator works in JS is there is a condition which is going to evaluate if it is true or false.
Place ? after it
 We have 2 return values  which returns if it is true, and a second return value if that is false.
Need to return out the information

Some people put it in the below code while others return it 

Works like this 

Running through the code either returning JSX or we aren’t

Version17.0
Forms- ultimate to add new items to list
Take data and push it to array in state
This prop <Ninjas ninjas={this.state.ninjas}/>
Will update in ninjas.js
Rerender the data
	// 		return (
	// 			<div className="ninja" key={ninja.id}>
	// 		<div> Name: { ninja.name } </div>
	// 		<div> Age: { ninja.age } </div>
	// 		<div> Belt: { ninja.belt } </div>
	// 		</div>
Add that ninja to the list

Create new form to store the data locally on that component state
Do not need an action on the form
Cant just use for, have to use <label htmlFor='name'>, it is JSX’s way of doing it.
Create a function that changes the state every time it fires
When you type name, changes the name on the fly
Can create one function to handle the changes for name, age, and belt
How to differentiate for name, age, and belt
Added an id for each of them
Field we need to update [e.target.id]: 
Then we need the value to update it too
Then we just call the function every time we update it
Pass function from one component to another as a prop

Version18.0
Pass function down as a prop into this component
Can call that function in another component

This is a prop passed down addNinja= {this.addNinja}

We can add in a state because it returns in object

Adding it from the childing using 
	handleSubmit = (e) => {
		e.preventDefault();
		this.props.addNinja(this.state);
	}
Inside react, the push method would alter the array, adding to arry, and that is bad practice, do not want to alter the state outside of set state

Better practice would be to create a copy of the state,so you arent editing it and then add that array, and then sent it as the new state
Then you are only changing state inside set state
Use spread operator
let ninjas = [...this.state.ninjas]
Spread operator … is taking this array right here this.state.ninjas and spreading it out and adding it into new array.
Ninjas is now the same as the old ninjas

let ninjas = [...this.state.ninjas, ninja] when we add the , ninja we are adding ninjas from (ninja) in the function
addNinja = (ninja) => {
    ninja.id = Math.random();
    let ninjas = [...this.state.ninjas, ninja]

Version19.0
Deleting data from the list
Output template, be able to add button that fires function which deletes the user
When you add parentheses to a function you are automatically invoking it.
You can get around it by adding an anonymous function around it
Its going to filter out itesm for us to see whether this id is equal to the ninja id in here
Filter is non destructive its never going to alter this, only going to add a new array
If array is true its going to let it stay, if it is false it is going to filter it out of the new array

 deleteNinja = (id) => {
    let ninjas = this.state.ninjas.filter(ninja => {
      return 
    });
Need to check if this id is equal to the ninja id

Version20.0
Virtual Dom-
App.js is container component, which we define the state, of the component
Array of ninjas is passed down as a prop into ninjas.js UI component
Job of ui component is to cycle through the ninjas as a prop and output them to the dom, with some template for each individual ninja
addNinja.js we fire the form and the function is passed down to this component as a prop from app.js, passes back to app.js and the ninjas prop update which travels back to the UI component
Re-render the template based on the new data.passed down function delete ninja from this component to this component, pass the id of the ninja we want to delete, we filter through the array of states and deletes that ninja via the ninja
How is everything being re-rendered and that is from the virtual dom, via the new props, which updates jsx template.  Every update update makes a new virtual dom, and the current virtual dom is the same as the DOM, virtual dom compares itself to the current virtual dom, but only the changes are re-rendered on the dom. Then new virtual dom becomes current virtual dom.

Version21.0
Css in react
Can create css file for each file

Importing for current directory ‘./filename’ for current directory

Automatically adds vender prefixes to the files
Version 22
http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
Component life cycle

Mounting first created, constructor sets the state. Then get derived state from props, updates internal states, triggers on first rendered and triggers on new props, compares to new state received
Render, compares to render on the dom, returns some form of JSX, component did mount is where the data is updated
Compares old props with new props, computes false and only return true if it is going to be rerendered,
Render- renders templates to dom, we get read access to the dom
Sometimes use componentDidMount and sometime use componentDidUpdate

 fires when component first renders to the dom
  componentDidMount(){

Component is only mounted once

 //only fires when we get a change of states or props
  componentDidUpdate(prevProps, prevState){
    console.log('component updated');
    console.log(prevProps, prevState);
  }


Lifecycle hooks in action when you change delete or add

Version 23
Root component is App2.js
It’s going to be where we stores the state of our application we are going to create
Div is where we want to render our todos
Registered state in App2.js and pass those down into todos.js
Pass props from app2 to todos.js 

Pass props from todos.js to app.js 
<Todos todos={this.state.todos}/>

This.state.todos passes array down into the component

Using deconstruction in 
const Todos = ({todos}) => { so you can grab the todos down below

Map through list a nd return jsx.

const todoList = todos.length 
todos would be the props

Need a ternary operator to check if its true or false

When you use map function, react expects each item to have its own unique id
So you use key={todo.id}>
map( todo => {

Hook up event to delete todos

Need delete function in app.js because it has to interact with the state
	state ={
		todos:[
			{id:1, content: 'buy some milk'},
			{id:2, content: 'play mario kart'},
			]
	}


Have to add it in todos so we can grab it from the props object
const Todos = ({todos, deleteTodo}) => {
Add click event to span
<span onClick={deleteTodo(id)}>{todo.content}</span>
Have to add an anonymous function because otherwise it automatically fires
Filter function is none destructive, it returns a new array

Function as a parameter so we can fire something on each to do and we want to return either true or false,
True if we want to keep the item in the array
False if we want to remove

Say return todo.id !==
Todo.id is not equal to id
If they are not equal we do not want to filter them out.  If they are euqal we want them to remove

Version24.0
Need state so should be a class based component
NEed to add a prop so add a function 
	addTodo = (todo) => {
		
	}
Then pass addTodo as a prop in return via <AddTodo addTodo={this.addTodo}/>

When we say let todos = [...this.state.todos, todo]

We are taking the todos in the above state and add the new todo to the list

	state ={
		todos:[
			{id:1, content: 'buy some milk'},
			{id:2, content: 'play mario kart'},
			]
	}

Do delete the text on submit we add this. setState and incorporate content: '' and then add value={this.state.content} in <input type='text' onChange={this.handleChange} value={this.state.content}/>

	handleSubmit = (e) => {
		e.preventDefault();
		this.props.addTodo
		this.setState({
			content: ''
		})
	}
Version25.0
Normal html have multiple pages
App.js is the root component but adds a component
When you click for another page, react intercepts, then stops components from going to server, it just serves the 
Installed React router dom
npm install react-router-dom

React router dom allows the router
Import { BrowserRouter } from 'react-router-dom'; in main page

Set up browser router so inside can use routes
<BrowserRouter>
				<div className="App">
					<Navbar />
					<Route path='/' component={Home} />
				</div>
			</BrowserRouter>

When this is set up exactly, it doesnt pull all directories with the /
<Route exact path='/' component={Home} />

Version26.0
How do we stop requesting the page over and over again
Instead of using A tags in Navbar.js we will use link or a navlink from react
Imported 
import { link, Navlink } from 'react-router-dom'; to Navbar.js

Changed tags to Link to= tags from a href= tags
This allows the page to load with react and it loads with a href tags anyways
<li><Link to= '/'>Home</Link></li>
					<li><Link to= '/about'>About</Link></li>
					<li><Link to= '/contact'>Contact</Link></li>
From a href= 
When we changed to Link tag we did not reload the page

Difference between Link and NavLink, is that NavLink sets the html tag to class=”active” which helps when styling a webpage but Link does not

Version27.0 
Programmatic Redirects
How to programmatic direct a user to another url

If we add props to … we automatically added router info and that is because this is one of the component the router does load up
const Contact = (props) => {

Router attaches more info to the props object
In the props router info there is Match location and history.  In history it keeps track of history
If we push a route to that history, then its going to add another location to the history and push us to the location

This passed props as through and it came a router.  Then it allows us to get the history, and in the push section we can add a different url and then after 2 secs it brings us to the about page
const Contact = (props) => {
	setTimeout(() => {
		props.history.push('/about');
	}, 2000);

Use a higher order component wraps another component and gives it extra powers
Have to import higher order component
Import withRouter  also export it but have ro wrap the component
export default withRouter(Navbar) ;
import { Link, NavLink, withRouter } from 'react-router-dom';

Version28.0
higher order components wrap other components and give them superpowers or extra features
Navbar which is component give to higher order component and becomes supercharged
withRouter gives adds props which has information about the component in the function

… is the spread operator

Created higher order component that gives a random

Created function aka rainbow, taking WrappedComponent which is going to wrap another component and make it supercharrged
Colors has list, randomcolor takes a color, classname creates a classname for the div tag which changes the color
Then react takes the className as a prop, and it is wrapped around wrapped component

There will be an extra div around the text you are trying to wrap.

You have to wrap the tags in about
export default Rainbow(About);

It will also pass the props from the operator using the spread operator {...props}

import React from 'react';

const Rainbow = (WrappedComponent) => {
	
	const colors = ['red', 'pink', 'orange', 'blue', 'green', 'yellow'];
	const randomColor = colors[Math.floor(Math.random() * 5)];
	const className = randomColor + '-text';
	
	return (props) => {
		return (
			<div className={className}>
				<WrappedComponent {...props}/>
			</div>
			);
	};
	
};

export default Rainbow;

Version29.0
Show data to users via API

Install axios
npm install axios

To use a lifestyle hook we have to convert this component to a class based component

Functional components cannot use lifecycle hooks

Axios is a promise and we do not know when it will finish so you use the .then function

We want to put posts as an empty array.  Then in axios, we want the response, so we are going to set the state and return the first 10 data starting from position 0

		posts: [ ]
	}
	componentDidMount(){
		axios.get('https://jsonplaceholder.typicode.com/posts')
		.then(res => {
			console.log(res);
			this.setState({
				posts: res.data.slice(0, 10)
			});
		});
	}

When we set const { posts } = this.state; in the render method it is grabbing the posts property from the state.
const { posts } = this.state;

Only want to cycle through the data whne there is something in the post

Home.js looks like
import React, { Component } from 'react';
import axios from 'axios';


class Home extends Component {
	state = {
		posts: [ ]
	}
	componentDidMount(){
		axios.get('https://jsonplaceholder.typicode.com/posts')
		.then(res => {
			console.log(res);
			this.setState({
				posts: res.data.slice(0, 10)
			});
		});
	}
	render() {
		const { posts } = this.state;
		const postList = posts.length ? (
				posts.map(post => {
					return (
							<div className='post card' key={post.id}>
								<div className='card-content'> 
									<span className='card-title'>{post.title} </span>
									<p>{post.body}</p>
								</div>
							</div>
						);
				})
			) : (
			<div className='center'>No Posts Yet</div>
			);
		return (
		<div className='container'>
		<h4 className='center'>Home</h4>
		{postList}
		</div>
		);
	}
}

export default Home;

Version30.0
Route Parameters
-Part of a url that can change
-usually see them on urls for individual records
User profile route:
mysite.com/users/yoshi2k1
mysite.com/users/mariotheman

Cooking recipe page:
mycookingsite.com/recipes/12345
mycookingsite.com/recipes/98765

Changing parts are route parameters
Define route parameter through a colon and a name
<Route path='/:post_id' component={} />
We are expecting a url with a parameter called post id

In Post we want to identify what the route parameter is

When we looked at the reactor router we received all the extra info attached to the props object about our route.  We can grab that by saying this.props.match.params and the name of the route parameter we called it post_id

We automatically get props in class based components
When this component is being used as a route, we get the extra info attached
Inside the route param we can identify what the route parameter is, then we know what kind of props to go grab

Version31.0
Grabs url and displays it on page.
Want to take urls and display that information
Surround links and then set an id for each individual post
