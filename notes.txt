Version1.0

React
JS library created by facebook
Also used by netflix and Instagram
Usesd to create JS-driven dynamic web apps
In that regard can be compared to Angular and Vue

Redux
A layer on top of React
Helps with State Management of our app
	Datain in the app
	UI state of the app
Is the menu open or closed

React basics
Componetnts events templates props and forms

React router
Routes, route paramenters, redirects

Redux
Stores, actions and reducers

Version 2.0
React
Components, Components, Components
Compents for Nav bar, Search Bar and Footer

Creates a js representation of the virtual dom
Takes virtual dom renders it to the DOM,

Idea heres is that when one of the component changes it renders it to the DOM very quickly because of the virtual DOM.
React creates a new virtual DOM and compares it to the OLD virtual DOM, and knows exact what it has to update in the actual DOM.

This happens every time, one of your component state changes.

Components and Templates
Components look like HTML templates (actually JSX)- JS XML
They can contain ”state” (data or UI State)
They can contain JS for functionality

Version 3.0
Package can create flow of whole pack with a full pack set up
  <!--Core react libary-->
  <script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
  <!--React DOM libary- glue layer between react and the dom. Its what lets us inject our components into the DOM-->
  
  <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>

Need both of the 2 libaries loaded into our index dot HTML Document

Packages
ES7 React/Redux GraphQL/React-Native Snippets
Sublime Babel

Version4.0
React components are the lifeblood of react and we use them to take control of different elements inside the navbar search bar contact form
Need to create class based components
Classes are a way for us to bluepring objects in JS

React Object Component to inherit all the base functionality of a component into this class
Class based components must have at least one function inside of them And that function is called render
Render is responsible for rendering our template to w.e element we want to render to return a value inside it is going to be the JSX template and is going to go inside paratheseses 
JSX allows us to write HTML code inside JS 

Can only have one root element
Cannot use class have to use className=
Take the glue layer that takes our components and can render them to the DOM is by saying react.  We don’t get access to that by here
When using ReactDOM.render() first parameter is which component we want to render to the DOM
We have to add it as a tag like ReactDOM.render(<App />, docment.getElementById(‘app’)) 
The second paramter is going to be where we want to render it to the DOM

JSX is normally not support in browers
Have to add type="text/babel" to <script type="text/babel"> before the dom
It doesnt get rid of it, it just nests our component inside that div

Idea of React is to actually output dynamic content
We can output dynamic JS content  inside these curly braces
Like take math object Math.random() * 10
Have to always use {}
So in
	<script type="text/babel">
		class App extends React.Component {
			render() {
				return (
					<div className="app-content">
					<h1> Hey, ninjas</h1>
					<p>{Math.random() * 10}</p>
					</div>
				);
			}
		}
		ReactDOM.render(<App />, document.getElementById('app'))
	</script>

Version5.0
Component State
JS Object
Descibes the current state of the component
Data, UI State
The state of a component can be updated over time
	A modal could close
	The data we output could change

Shopping Cart Component
{
	Items: [
		{ name: ‘navy jumper’, price: 9.99 },
{ name: ‘ ninja mask’, price: 19.99 },
]
}
State of compoent is JS object, property name called items, an array and inside array two objects and 2 objects represent an item in shopping cart.  Storing it locally to change state so it adds a third item.  Take state to dynamically add another component.  Storying locally
Pop up and it can either be true or false.  Storing component UI state.  

Different ways to create a state of component
First way is to just define state property within the class
State equals JS object state = {   } which will contain some kind of data or UI state.  Add different properties inside the object
Add name property 
This is not really doing anything
Output state to template
It is going to be dynamically so have to enclose it in { }
This to reference the component itself, then we get access to the state property, then access the name by .name
<p>My name is {this.state.name }</p>
This is how we define state

Version6.0 
React Developer tools for Chrome
Lights up red if dev or lights up blue if its in production
Rendered App to the DOM and can see the state of the component
Real Scenario, the user will dynamically change events based on forms
Lets your interact when you are testing your tools

Version7.0
Re-renders state whenever it is changed re-renders to out put it to the dom
We want to add a button with onClick event but cannot just add <button onClick=””
Because it is in html
Wantto output dynamic JS inside the so we have to add { }
Have to add a function just like we did render()
To call function have to add this.handleClick because it refers to  the component which the function is stored on
Do not want to have this.handleClick() with parenthases because it will run the function as soon as the page is run
We only want to pass a reference instead of automatically firing it.  We want to do it when the user clicks the button
Added handleMouseOver
handleMouseOver(e) {
				console.log(e.target, e.pageX, e.pageY);
			}
.target tells us the target element
.pageX tells us the X coordinate on the page
.pageY tells us the Y coordinate on the page

onCopy={} tells us when the user tries to copy the text
It console logs the result out

Inside a function cannot reference .this due to the different points in the component

Version7.0
Re-renders state whenever it is changed re-renders to out put it to the dom
We want to add a button with onClick event but cannot just add <button onClick=””
Because it is in html
Wantto output dynamic JS inside the so we have to add { }
Have to add a function just like we did render()
To call function have to add this.handleClick because it refers to  the component which the function is stored on
Do not want to have this.handleClick() with parenthases because it will run the function as soon as the page is run
We only want to pass a reference instead of automatically firing it.  We want to do it when the user clicks the button
Added handleMouseOver
handleMouseOver(e) {
				console.log(e.target, e.pageX, e.pageY);
			}
.target tells us the target element
.pageX tells us the X coordinate on the page
.pageY tells us the Y coordinate on the page

onCopy={} tells us when the user tries to copy the text
It console logs the result out

Inside a function cannot reference .this due to the different points in the component
render?

Version8.0
Why can we not access .this in the function when we can call it in render?
Can get it in the templates but not the functions
This is generally determined by how and where the function is called not by where the function sits
The value of the this keyword inside a function is not what you’d expect, so he would probably assume that the context of the this keyword inside the react component instance would be able to access this.state
By default when you call a function like this in reaction to a DOM event in the browser window, the keyword is lost inside the function and its set to undefined, aka undefined and an error

We are able to do it in render as react automatically binds the context of this forest inside this function we dont have to do any manual work
Inside our own custom functions of this class when we call them in reaction to DOM events the context of this is not bound and we have to do it ourselves

If we set the functions to arrow functions it will now work
handleClick = (e) => {
			console.log(this.state);
			}
Arrow functions have a special behavior when it comes to this keyword.  They bind the value of this to w.e this is outside the function
The value of this is just the component instance, so it is taking it and binding it into this in this.state
The arrow function takes the value of this to be the component and passes it inside the function

Change the state when an event happens
We use this.setState() in here we pass what ever properties we want to update

Version9.0
onChange= {} updates every time there is a change

handleChange = (e) => {
				this.setState
			}
Change state when the user types in the form
We have a property called value and that is going to get the value of w.e inside the input field every time something in the input field is set
Change the default
Instead of onClick you do onSubmit it also takes when a user hits enter
Prevent default handleSubmit =(e) => {
				e.preventDefault();
			}

Version10.0
Create React App
A command line tool to create React Aoo
-development server
-use es6 feautures which are not normally supported
-keep our code modular
-use build tools to create optimized code

To get into React in c9 you need to use
npm install -g create-react-app
create-react-app my-app
cd my-app
npm start
Under myapp, public folder is served to the browser 
Index.html is servered in there
Package.lock locks down the file
SRC file is where the folders you use are

Version11.0
Single Page Apps
React apps are typically SPA’s
Only ever one HTML page served to the browser
React then controls what a user sees on that page

There will only ever be one HTML page that is served to the browser from the server and updated based on what the user sees
Multi-page apps- A user will go to an address like website.com/index and send a request to the server
Server sends back html page dependent on address
If go to /contaact it makes another request to server and server sends back response

React, make initial request and it sends back html file, when it reaches browser react takes over 
Then react intercepts that page, and it says what you want to see, and saves you a trip to the server
Public/index.html is the standard file
Need to get the files inside <div id="root"></div>

In src/app.js is an class based component with the render method.  At the end of the file we are exporting it so it can be rendered to the DOM on src/index.js file

Run file
Npm start, you go into the folder myapp and type npm start to go to development server
Index.js is where we render the application to the dom

Deleted css file and test file, logo file
Stripped back file to basics
Updated file and when we save it, it automatically updates

Version 12.0

App.js only component being uploaded on the app.  It is the root component.

There are Nesting Components
App.js is the Root Component sits at the top of the tree, show different components nest in it. When it sits inside aonother component it nests inside of it and it nests Navbar.js and Contact Form.js

At the top of the app.js file we are importing React but also the {component} aspect of it
import React, { Component } from 'react';
When ever we create an app based component we are going to need to add import React, { Component } from 'react';

The render method returns JSX template

We need to export it so we can import it into the main root folder
Export Ninjas, then import it so it can be imported inside the component
Add import Ninjas from './Ninjas'; in the app.js file to import the component
Now we nest it
We nest it as if it was an HTML element 
<Ninjas/> self nested 

Why did we need to nest a component in the first place instead of typing in everything.

Idea of the components is that we are keeping code more modular and that component more modular, and that component may have its own state or method at some point which we dont want to confuse with its own.

How to make it more dynamic you use props.

Version13.0
<Ninjas/>  is the child component because it is sitting inside the parent component
Props are a way to send data from the parent component to the child component

We can pass data instead of hardcoding the data
We use props which is short for properties and we output it into the properties
We can pass name property
Making props and being passed into ninja components.
We can then access them in ninjas via the class based components automatically
Can add js inside render because it is just a js object

In Ninja.js add console.log(this.props) to the render object
In the console we can see the props.  We can output inside the templadte

We can render it in the template using <div> Name: {this.props.name} </div> instead of hardcoding them.

There is an easier way using destructuring
Using properties name
We are storing them in a const
const {name, age, belt} = this.props; and its taking this.props.name and this.props.age and this.props.belt
Now stored as <div> Name: { name } </div>Why did we do it we can paste it below and then output different data
We can use it over and over again just in different places
That is how we pass props down and how we output the props

Version14.0
Nesting Ninja component only outputting one component out to the dom.
Instead out outputting the data on the ninja we will be 
Define data in the state then pass it to the component of Ninjas
Added 
  state = {
    ninjas : [
    { name: 'Ryu', age: 30, belt: 'black', id: 1 },
    { name: 'Yoshi', age: 25, belt: 'green', id: 2 }, 
    { name: 'Crystal', age: 20, belt: 'red', id: 3 }
        ]
  }
Before Render
Each array item is an object
Pass it into component Ninjas
We are going to receive the array as a prop in app.js, cycle through it and out put it for each individual ninja.
Call this prop ninjas, so it now looks like this <Ninjas ninjas={this.state.ninjas}/>

Passing down array of ninjas and passing it down as a prop, inside the component
const { ninjas } = this.props is the same as const ninjas = this.props.ninjas

We want to output it to the dom
Use the js method called map
What does the js method does in js takes the array and it maps it to a new array.  Want to map it to a new array.
Store snippets ina new array then store array
We want to store our new array full of HTML elements inside so we’ll set it equal to ninjas
In .map() we take each individual in this case ninja as we cycle through it
Return a value inside the function
Returned value is the element which is popped into the new array
Return some JSX code, some HTML for each individual ninja, and that will be the template from that individual
One set of JSX for each individual ninja
Instead of referencing name, age, and belt...we need to reference ninja.name, ninja.age, and ninja.belt
Return JSX and storing JSX for each ninja is 
Out put each ninja, create a div and output this array

As it stands each element is getting the same key identifier.
Need to identify the element, to determine which ninja is removed or modified
Each element needs an identifier and we chose the id
render(){
		// console.log(this.props)
		const { ninjas } = this.props;
		const ninjaList = ninjas.map(ninja => {
			return (
			<div className="ninja" key={ninja.id}>
			<div> Name: { ninja.name } </div>
			<div> Age: { ninja.age } </div>
			<div> Belt: { ninja.belt } </div>
			</div>
			);
		});
		return(
			<div className="ninja-list">
				{ ninjaList }
			</div>
		);
	}	

Version 15.0
Container Vs UI Components

Container Components (sometimes called class based components)
Contain state for data and Serve as data sources
Contain lifecycle hooks, grab data and store that in their states and then nest the other components in them, not concerned with how the application looks
Not concerned with UI
Use classes to create
Serve as data sources

UI Components (stateless component)
Don’t contain state
Receive data from props
Only concerned with UI
Use functions to create



Root component at the top, called app.js and it would be called a container component, contains other components
May go to a database via a lifecycle hook, grab some data ,store that on its states, inside app.js and pass that data down as a prop.
Blue would be UI components or functional components, created by functions and not classes.  That is because they dont need their own state.  How do we output the links on a page and  ninjas.js gets its data from props passed down from the app contains a component so this here doesn’t need a state, and its just concerned with how that data is then output to the screen.

Contact form.js container.  You can nest containers inside container
A container will have its own local state to store the users input into that form.  
We would build with a class instead of a function
Containers have states and UI components which dont have states.

This is a container component built with the class keyword
class App extends Component {
  state = {
    ninjas : [
    { name: 'Ryu', age: 30, belt: 'black', id: 1 },
    { name: 'Yoshi', age: 25, belt: 'green', id: 2 }, 
    { name: 'Crystal', age: 20, belt: 'red', id: 3 }
        ]
  }
Ninjas.js does not have its own state.  The data it receives is from the props, in the container component

Delete class in ninjas.js
We are going to build a functional component

Its undefined, cannot read ninjas, off of this.props 

Do not automatically get the props passed to it like we do a class based system

In class based compoenents props automatically come and are attached to the instance of the component anad reference them by saying this.props but in functional components we passed the props in as a parameter to that function and can acess them just by saying props

Made it a functional component because we dont need the state in it anymore
We could no longer access a state in ninjas.js.

We could use destructuring to get ninjas off the props const { ninjas } = props;

Version16.0
Output something conditionally
Show under certain conditions, show only if 5 items or more are added to the shopping basket
Only output ninja if their age is greater than 20
Can use if statement
Mapping through ninjas, we want it to return only ninjas > 20
The other way to display something is by using the ternary operator in JS
Ternary operator works in JS is there is a condition which is going to evaluate if it is true or false.
Place ? after it
 We have 2 return values  which returns if it is true, and a second return value if that is false.
Need to return out the information

Some people put it in the below code while others return it 

Works like this 

Running through the code either returning JSX or we aren’t